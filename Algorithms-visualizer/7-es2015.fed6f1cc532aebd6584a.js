(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"0CzR":function(n,e,t){"use strict";t.r(e);var i=t("8Y7J");class l{}var r=t("pMnS"),a=t("s7LF"),o=t("iInd"),s=t("SVse"),u=t("uM4N"),d=t("lT8R"),h=t("5GAg"),c=t("IP0z"),m=t("omvX");class p{constructor(){this.ind1=null,this.ind2=null,this.ind3=null,this.swapped=!1,this.leftBoundary=null,this.rightBoundary=null,this.leftBoundary2=null,this.rightBoundary2=null}}class b{constructor(){this.historgramReady=new i.m,this.boardColoringParams=new p}ngOnInit(){}onWindowResize(n){this.initBoard()}ngAfterViewInit(){this.initBoard(),this.historgramReady.emit(this.board)}adjustBoardParams(){const n=this.boardWrapperElementRef.nativeElement;this.board.width=n.clientWidth,this.board.height=n.clientHeight,this.barWidth=(this.board.width-2*(this.values.length+2))/this.values.length,this.barUnitLength=(this.board.height-50)/Math.max(...this.values),this.barWidth=Math.min(this.barWidth,10),this.initX=(this.board.width-2*this.values.length-this.barWidth*this.values.length)/2+2,this.initY=40}initBoard(){this.board=this.boardElementRef.nativeElement,this.boardContext=this.board.getContext("2d"),this.adjustBoardParams(),this.drawBoard()}drawBoard(n=new p){this.boardColoringParams=n,this.boardContext.clearRect(0,0,this.board.width,this.board.height);let e=this.initX,t=this.initY;for(let i=0;i<this.values.length;i++){this.boardContext.rotate(-Math.PI/2),this.boardContext.textAlign="center",null!==n.ind1&&n.ind1===i||null!==n.ind2&&n.ind2===i?(n.swapped?this.boardContext.fillStyle="#990000":n.ind1===i?this.boardContext.fillStyle="#232442":n.ind2===i&&(this.boardContext.fillStyle="#1b4a96"),this.boardContext.font="bold 10pt Courier"):(this.boardContext.fillStyle="black",this.boardContext.font="normal 8pt Courier"),this.boardContext.fillText(this.values[i].toString(),-15,e+8),this.boardContext.rotate(Math.PI/2),null!==n.ind1&&n.ind1===i||null!==n.ind2&&n.ind2===i?n.swapped?this.boardContext.fillStyle="#990000":n.ind1===i?this.boardContext.fillStyle="#23216d":n.ind2===i&&(this.boardContext.fillStyle="#143873"):this.boardContext.fillStyle="grey";const l=this.values[i]*this.barUnitLength;null!==n.ind3&&n.ind3===i&&(this.boardContext.fillStyle="black"),this.boardContext.fillRect(e,t,this.barWidth,l),n.leftBoundary!==i&&n.rightBoundary!==i||(this.boardContext.beginPath(),this.boardContext.moveTo(e,t-14),this.boardContext.lineTo(e+this.barWidth,t-14),this.boardContext.lineTo((2*e+this.barWidth)/2,t-2),this.boardContext.lineTo(e,t-14),this.boardContext.closePath(),n.leftBoundary===i?this.boardContext.fillStyle="green":n.rightBoundary===i&&(this.boardContext.fillStyle="red"),this.boardContext.fill()),n.leftBoundary2!==i&&n.rightBoundary2!==i||(this.boardContext.beginPath(),this.boardContext.moveTo(e,t-14),this.boardContext.lineTo(e+this.barWidth,t-14),this.boardContext.lineTo((2*e+this.barWidth)/2,t-2),this.boardContext.lineTo(e,t-14),this.boardContext.closePath(),n.leftBoundary2===i?this.boardContext.fillStyle="blue":n.rightBoundary2===i&&(this.boardContext.fillStyle="orange"),this.boardContext.fill()),e+=this.barWidth+2}}}var g=i.qb({encapsulation:0,styles:[['#board-wrapper[_ngcontent-%COMP%]{width:100%;height:400px;background-color:#fff}.values-wrapper[_ngcontent-%COMP%]{width:100%;margin:0;padding-top:20px;background-color:#0d0d26;float:left}.values-wrapper[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]{float:left;width:auto;padding:14px;color:#000;background-color:#fff;font-size:12px;border-radius:4px;margin:4px 2px 22px}.values-wrapper[_ngcontent-%COMP%]   .value[_ngcontent-%COMP%]:last-child{float:clear}.values-wrapper[_ngcontent-%COMP%]   .swapped[_ngcontent-%COMP%]{background-color:#0d0d26;color:#fff;font-weight:700;border-radius:4px;padding:12px;border:2px solid #ed594e}.values-wrapper[_ngcontent-%COMP%]   .compared[_ngcontent-%COMP%]{font-weight:700;color:#fff;border-radius:4px;padding:12px;border:2px solid #fff}.values-wrapper[_ngcontent-%COMP%]   .compared1[_ngcontent-%COMP%]{background-color:#0d0d26;padding:12px;border:2px solid #fff}.values-wrapper[_ngcontent-%COMP%]   .compared2[_ngcontent-%COMP%]{background-color:#143873;padding:12px;border:2px solid #fff}.values-wrapper[_ngcontent-%COMP%]   .pivot[_ngcontent-%COMP%]{background-color:#000;font-weight:700;color:#fff;border-radius:4px;padding:12px;border:2px solid #fff}.values-wrapper[_ngcontent-%COMP%]   .leftBoundary[_ngcontent-%COMP%]{position:relative}.values-wrapper[_ngcontent-%COMP%]   .leftBoundary[_ngcontent-%COMP%]::before{position:absolute;content:"";bottom:-20px;left:-4px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:12px solid green}.values-wrapper[_ngcontent-%COMP%]   .rightBoundary[_ngcontent-%COMP%]{position:relative}.values-wrapper[_ngcontent-%COMP%]   .rightBoundary[_ngcontent-%COMP%]::after{position:absolute;content:"";bottom:-20px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-bottom:12px solid red}.values-wrapper[_ngcontent-%COMP%]   .leftBoundary2[_ngcontent-%COMP%]{position:relative}.values-wrapper[_ngcontent-%COMP%]   .leftBoundary2[_ngcontent-%COMP%]::before{position:absolute;content:"";top:-20px;left:-4px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-top:12px solid #00f}.values-wrapper[_ngcontent-%COMP%]   .rightBoundary2[_ngcontent-%COMP%]{position:relative}.values-wrapper[_ngcontent-%COMP%]   .rightBoundary2[_ngcontent-%COMP%]::after{position:absolute;content:"";top:-20px;width:0;height:0;border-left:6px solid transparent;border-right:6px solid transparent;border-top:12px solid orange}']],data:{}});function f(n){return i.Lb(0,[(n()(),i.sb(0,0,null,null,4,"div",[],null,null,null,null,null)),i.Hb(512,null,s.z,s.A,[i.r,i.s,i.k,i.D]),i.rb(2,278528,null,0,s.i,[s.z],{ngClass:[0,"ngClass"]},null),i.Gb(3,{swapped:0,compared:1,compared1:2,compared2:3,leftBoundary:4,rightBoundary:5,leftBoundary2:6,rightBoundary2:7,pivot:8,value:9}),(n()(),i.Kb(4,null,[" "," "]))],function(n,e){var t=e.component,i=n(e,3,0,(e.context.index===t.boardColoringParams.ind1||e.context.index===t.boardColoringParams.ind2)&&t.boardColoringParams.swapped,(e.context.index===t.boardColoringParams.ind1||e.context.index===t.boardColoringParams.ind2)&&!t.boardColoringParams.swapped,e.context.index===t.boardColoringParams.ind1&&!t.boardColoringParams.swapped,e.context.index===t.boardColoringParams.ind2&&!t.boardColoringParams.swapped,t.boardColoringParams.leftBoundary===e.context.index,t.boardColoringParams.rightBoundary===e.context.index,t.boardColoringParams.leftBoundary2===e.context.index,t.boardColoringParams.rightBoundary2===e.context.index,t.boardColoringParams.ind3===e.context.index,!0);n(e,2,0,i)},function(n,e){n(e,4,0,e.context.$implicit)})}function v(n){return i.Lb(0,[i.Ib(671088640,1,{boardElementRef:0}),i.Ib(671088640,2,{boardWrapperElementRef:0}),(n()(),i.sb(2,0,[[2,0],["boardWrapper",1]],null,1,"div",[["id","board-wrapper"]],null,null,null,null,null)),(n()(),i.sb(3,0,[[1,0],["board",1]],null,0,"canvas",[["id","board"]],null,null,null,null,null)),(n()(),i.sb(4,0,null,null,2,"div",[["class","values-wrapper"]],null,null,null,null,null)),(n()(),i.hb(16777216,null,null,1,null,f)),i.rb(6,278528,null,0,s.j,[i.O,i.L,i.r],{ngForOf:[0,"ngForOf"]},null)],function(n,e){n(e,6,0,e.component.values)},null)}var y=t("mrSG");class w{constructor(){this.bubbleSortExplanation="\nBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\n\nExample:\nFirst Pass:\n( 5 1 4 2 8 ) \u2013> ( 1 5 4 2 8 ), Here, algorithm compares the first two elements, and swaps since 5 > 1.\n( 1 5 4 2 8 ) \u2013>  ( 1 4 5 2 8 ), Swap since 5 > 4\n( 1 4 5 2 8 ) \u2013>  ( 1 4 2 5 8 ), Swap since 5 > 2\n( 1 4 2 5 8 ) \u2013> ( 1 4 2 5 8 ), Now, since these elements are already in order (8 > 5), algorithm does not swap them.\n\nSecond Pass:\n( 1 4 2 5 8 ) \u2013> ( 1 4 2 5 8 )\n( 1 4 2 5 8 ) \u2013> ( 1 2 4 5 8 ), Swap since 4 > 2\n( 1 2 4 5 8 ) \u2013> ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u2013>  ( 1 2 4 5 8 )\nNow, the array is already sorted, but our algorithm does not know if it is completed. The algorithm needs one whole pass without any swap to know it is sorted.\n\nThird Pass:\n( 1 2 4 5 8 ) \u2013> ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u2013> ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u2013> ( 1 2 4 5 8 )\n( 1 2 4 5 8 ) \u2013> ( 1 2 4 5 8 )\n\nWorst and Average Case Time Complexity: O(n*n). Worst case occurs when array is reverse sorted.\n\nBest Case Time Complexity: O(n). Best case occurs when array is already sorted.\n\nAuxiliary Space: O(1)\n\nSorting In Place: Yes\n\nStable: Yes\n\nDue to its simplicity, bubble sort is often used to introduce the concept of a sorting algorithm.\nIn computer graphics it is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines\n  ",this.bubbleSortCode='\n  // C++ program for implementation of Bubble sort\n  #include <bits/stdc++.h>\n  using namespace std;\n\n  void swap(int *xp, int *yp)\n  {\n    int temp = *xp;\n    *xp = *yp;\n    *yp = temp;\n  }\n\n  // An optimized version of Bubble Sort\n  void bubbleSort(int arr[], int n)\n  {\n     int i, j;\n     bool swapped;\n     for (i = 0; i < n-1; i++)\n     {\n       swapped = false;\n       for (j = 0; j < n-i-1; j++)\n       {\n          if (arr[j] > arr[j+1])\n          {\n             swap(&arr[j], &arr[j+1]);\n             swapped = true;\n          }\n       }\n\n       // If no two elements were swapped by inner loop, then break\n       if (swapped == false)\n          break;\n     }\n  }\n\n  /* Function to print an array */\n  void printArray(int arr[], int size)\n  {\n    int i;\n    for (i = 0; i < size; i++)\n      cout << arr[i] << " ";\n    cout << endl;\n  }\n\n  // Driver code\n  int main()\n  {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    bubbleSort(arr, n);\n    cout<<"Sorted array: \\n";\n    printArray(arr, n);\n    return 0;\n  }\n  ',this.insertionSortExplanation="\nInsertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands.\n\nAlgorithm\n// Sort an arr[] of size n\ninsertionSort(arr, n)\nLoop from i = 1 to n-1.\n  a) Pick element arr[i] and insert it into sorted sequence arr[0\u2026i-1]\n\nExample:\n12, 11, 13, 5, 6\n\nLet us loop for i = 1 (second element of the array) to 4 (last element of the array)\n\ni = 1. Since 11 is smaller than 12, move 12 and insert 11 before 12\n11, 12, 13, 5, 6\n\ni = 2. 13 will remain at its position as all elements in A[0..i-1] are smaller than 13\n11, 12, 13, 5, 6\n\ni = 3. 5 will move to the beginning and all other elements from 11 to 13 will move one position ahead of their current position.\n5, 11, 12, 13, 6\n\ni = 4. 6 will move to position after 5, and elements from 11 to 13 will move one position ahead of their current position.\n5, 6, 11, 12, 13\n\nTime Complexity: O(n*2)\n\nAuxiliary Space: O(1)\n\nBoundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse order. And it takes minimum time (Order of n) when elements are already sorted.\n\nAlgorithmic Paradigm: Incremental Approach\n\nSorting In Place: Yes\n\nStable: Yes\n\nOnline: Yes\n\nUses: Insertion sort is used when number of elements is small. It can also be useful when input array is almost sorted, only few elements are misplaced in complete big array.\n\nWhat is Binary Insertion Sort?\n  We can use binary search to reduce the number of comparisons in normal insertion sort. Binary Insertion Sort uses binary search to find the proper location to insert the selected item at each iteration. In normal insertion, sorting takes O(i) (at ith iteration) in worst case. We can reduce it to O(log i) by using binary search. The algorithm, as a whole, still has a running worst case running time of O(n^2) because of the series of swaps required for each insertion.\n\nHow to implement Insertion Sort for Linked List?\n  Below is simple insertion sort algorithm for linked list.\n\n  1) Create an empty sorted (or result) list\n  2) Traverse the given list, do following for every node.\n    a) Insert current node in sorted way in sorted or result list.\n  3) Change head of given linked list to head of sorted (or result) list.\n  ",this.insertionSortCode='\n  // C++ program for insertion sort\n  #include <bits/stdc++.h>\n  using namespace std;\n\n  /* Function to sort an array using insertion sort*/\n  void insertionSort(int arr[], int n)\n  {\n    int i, key, j;\n    for (i = 1; i < n; i++)\n    {\n      key = arr[i];\n      j = i - 1;\n\n      /* Move elements of arr[0..i-1], that are\n      greater than key, to one position ahead\n      of their current position */\n      while (j >= 0 && arr[j] > key)\n      {\n        arr[j + 1] = arr[j];\n        j = j - 1;\n      }\n      arr[j + 1] = key;\n    }\n  }\n\n  // A utility function to print an array of size n\n  void printArray(int arr[], int n)\n  {\n    int i;\n    for (i = 0; i < n; i++)\n      cout << arr[i] << " ";\n    cout << endl;\n  }\n\n  /* Driver code */\n  int main()\n  {\n    int arr[] = { 12, 11, 13, 5, 6 };\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n    printArray(arr, n);\n\n    return 0;\n  }\n  ',this.quickSortExplanation='\nLike Merge Sort, QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. 1. Always pick first element as pivot.\n2. Always pick last element as pivot (implemented below)\n3. Pick a random element as pivot.\n4. Pick median as pivot.\n\nThe key process in quickSort is partition().\nTarget of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time.\n\nAnalysis of QuickSort\nTime taken by QuickSort in general can be written as following.\n\nT(n) = T(k) + T(n-k-1) + theta(n)\nThe first two terms are for two recursive calls, the last term is for the partition process. k is the number of elements which are smaller than pivot.\nThe time taken by QuickSort depends upon the input array and partition strategy. Following are three cases.\n\nWorst Case: The worst case occurs when the partition process always picks greatest or smallest element as pivot. If we consider above partition strategy where last element is always picked as pivot, the worst case would occur when the array is already sorted in increasing or decreasing order.\n\nFollowing is recurrence for worst case.\n\nT(n) = T(0) + T(n-1) + theta(n)\nwhich is equivalent to\nT(n) = T(n-1) + theta(n)\nThe solution of above recurrence is theta(n^2).\n\nBest Case: The best case occurs when the partition process always picks the middle element as pivot. Following is recurrence for best case.\n\nT(n) = 2T(n/2) + theta(n)\nThe solution of above recurrence is theta(nLogn). It can be solved using case 2 of Master Theorem.\n\nAverage Case:\n  To do average case analysis, we need to consider all possible permutation of array and calculate time taken by every permutation which doesn\u2019t look easy.\nWe can get an idea of average case by considering the case when partition puts O(n/9) elements in one set and O(9n/10) elements in other set. Following is recurrence for this case.\n\nT(n) = T(n/9) + T(9n/10) + theta(n)\nSolution of above recurrence is also O(nLogn)\n\nAlthough the worst case time complexity of QuickSort is O(n^2) which is more than many other sorting algorithms like Merge Sort and Heap Sort, QuickSort is faster in practice, because its inner loop can be efficiently implemented on most architectures, and in most real-world data. QuickSort can be implemented in different ways by changing the choice of pivot, so that the worst case rarely occurs for a given type of data. However, merge sort is generally considered better when data is huge and stored in external storage.\n\nIs QuickSort <a href="https://www.geeksforgeeks.org/stability-in-sorting-algorithms/" target="_blank">stable</a>?\n  The default implementation is not stable. However any sorting algorithm can be made stable by considering indexes as comparison parameter.\nIs QuickSort <a href="https://www.geeksforgeeks.org/in-place-algorithm/" target="_blank">In-place</a>?\n  As per the broad definition of in-place algorithm it qualifies as an in-place sorting algorithm as it uses extra space only for storing recursive function calls but not for manipulating the input.\n\nWhat is 3-Way QuickSort?\n  In simple QuickSort algorithm, we select an element as pivot, partition the array around pivot and recur for subarrays on left and right of pivot.\nConsider an array which has many redundant elements. For example, {1, 4, 2, 4, 2, 4, 1, 2, 4, 1, 2, 2, 2, 2, 4, 1, 4, 4, 4}. If 4 is picked as pivot in Simple QuickSort, we fix only one 4 and recursively process remaining occurrences. In 3 Way QuickSort, an array arr[l..r] is divided in 3 parts:\n  a) arr[l..i] elements less than pivot.\n  b) arr[i+1..j-1] elements equal to pivot.\n  c) arr[j..r] elements greater than pivot.\nSee <a href="https://www.geeksforgeeks.org/3-way-quicksort-dutch-national-flag/" target="_blank">this</a> for implementation.\n\nHow to implement QuickSort for Linked Lists?\n  <a href="https://www.geeksforgeeks.org/quicksort-on-singly-linked-list/" target="_blank">QuickSort on Singly Linked List</a>\n  <a href="https://www.geeksforgeeks.org/quicksort-for-linked-list/" target="_blank">QuickSort on Doubly Linked List</a>\n\nCan we implement QuickSort Iteratively?\n  Yes, please refer <a href="https://www.geeksforgeeks.org/iterative-quick-sort/" target="_blank">Iterative Quick Sort.</a>\n\nWhy Quick Sort is preferred over MergeSort for sorting Arrays\n  Quick Sort in its general form is an in-place sort (i.e. it doesn\u2019t require any extra storage) whereas merge sort requires O(N) extra storage, N denoting the array size which may be quite expensive. Allocating and de-allocating the extra space used for merge sort increases the running time of the algorithm. Comparing average complexity we find that both type of sorts have O(NlogN) average complexity but the constants differ. For arrays, merge sort loses due to the use of extra O(N) storage space.\n\n  Most practical implementations of Quick Sort use randomized version. The randomized version has expected time complexity of O(nLogn). The worst case is possible in randomized version also, but worst case doesn\u2019t occur for a particular pattern (like sorted array) and randomized Quick Sort works well in practice.\n\n  Quick Sort is also a cache friendly sorting algorithm as it has good locality of reference when used for arrays.\n\n  Quick Sort is also tail recursive, therefore tail call optimizations is done.\n\nWhy MergeSort is preferred over QuickSort for Linked Lists?\n  In case of linked lists the case is different mainly due to difference in memory allocation of arrays and linked lists. Unlike arrays, linked list nodes may not be adjacent in memory. Unlike array, in linked list, we can insert items in the middle in O(1) extra space and O(1) time. Therefore merge operation of merge sort can be implemented without extra space for linked lists.\n\n  In arrays, we can do random access as elements are continuous in memory. Let us say we have an integer (4-byte) array A and let the address of A[0] be x then to access A[i], we can directly access the memory at (x + i*4). Unlike arrays, we can not do random access in linked list. Quick Sort requires a lot of this kind of access. In linked list to access i\u2019th index, we have to travel each and every node from the head to i\u2019th node as we don\u2019t have continuous block of memory. Therefore, the overhead increases for quick sort. Merge sort accesses data sequentially and the need of random access is low.\n\nHow to optimize QuickSort so that it takes O(Log n) extra space in worst case?\n  Please see <a href="https://www.geeksforgeeks.org/quicksort-tail-call-optimization-reducing-worst-case-space-log-n/" target="_blank">QuickSort Tail Call Optimization</a> (Reducing worst case space to Log n )\n  ',this.quickSortCode='\n  /* C++ implementation of QuickSort */\n  #include <bits/stdc++.h>\n  using namespace std;\n\n  // A utility function to swap two elements\n  void swap(int* a, int* b)\n  {\n    int t = *a;\n    *a = *b;\n    *b = t;\n  }\n\n  /* This function takes last element as pivot, places\n  the pivot element at its correct position in sorted\n  array, and places all smaller (smaller than pivot)\n  to left of pivot and all greater elements to right\n  of pivot */\n  int partition (int arr[], int low, int high)\n  {\n    int pivot = arr[high]; // pivot\n    int i = (low - 1); // Index of smaller element\n\n    for (int j = low; j <= high - 1; j++)\n    {\n      // If current element is smaller than the pivot\n      if (arr[j] < pivot)\n      {\n        i++; // increment index of smaller element\n        swap(&arr[i], &arr[j]);\n      }\n    }\n    swap(&arr[i + 1], &arr[high]);\n    return (i + 1);\n  }\n\n  /* The main function that implements QuickSort\n  arr[] --\x3e Array to be sorted,\n  low --\x3e Starting index,\n  high --\x3e Ending index */\n  void quickSort(int arr[], int low, int high)\n  {\n    if (low < high)\n    {\n      /* pi is partitioning index, arr[p] is now\n      at right place */\n      int pi = partition(arr, low, high);\n\n      // Separately sort elements before\n      // partition and after partition\n      quickSort(arr, low, pi - 1);\n      quickSort(arr, pi + 1, high);\n    }\n  }\n\n  /* Function to print an array */\n  void printArray(int arr[], int size)\n  {\n    int i;\n    for (i = 0; i < size; i++)\n      cout << arr[i] << " ";\n    cout << endl;\n  }\n\n  // Driver Code\n  int main()\n  {\n    int arr[] = {10, 7, 8, 9, 1, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    quickSort(arr, 0, n - 1);\n    cout << "Sorted array: \\n";\n    printArray(arr, n);\n    return 0;\n  }\n  ',this.mergeSortExplanation='\nLike QuickSort, Merge Sort is a Divide and Conquer algorithm.\nIt divides input array in two halves, calls itself for the two halves and then merges the two sorted halves.\nThe merge() function is used for merging two halves. The merge(arr, l, m, r) is key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one.\n\nTime Complexity: Sorting arrays on different machines. Merge Sort is a recursive algorithm and time complexity can be expressed as following recurrence relation.\nT(n) = 2T(n/2) + Theta(n)\nThe above recurrence can be solved either using Recurrence Tree method or Master method. It falls in case II of Master Method and solution of the recurrence is Theta(nLogn).\nTime complexity of Merge Sort is Theta(nLogn) in all 3 cases (worst, average and best) as merge sort always divides the array into two halves and take linear time to merge two halves.\n\nAuxiliary Space: O(n)\n\nAlgorithmic Paradigm: Divide and Conquer\n\nSorting In Place: No in a typical implementation\n\nStable: Yes\n\nApplications of Merge Sort\n\n  1. <a href="https://www.geeksforgeeks.org/merge-sort-for-linked-list/" target="_blank">Merge Sort is useful for sorting linked lists in O(nLogn) time</a>.In the case of linked lists, the case is different mainly due to the difference in memory allocation of arrays and linked lists. Unlike arrays, linked list nodes may not be adjacent in memory. Unlike an array, in the linked list, we can insert items in the middle in O(1) extra space and O(1) time. Therefore merge operation of merge sort can be implemented without extra space for linked lists.\nIn arrays, we can do random access as elements are contiguous in memory. Let us say we have an integer (4-byte) array A and let the address of A[0] be x then to access A[i], we can directly access the memory at (x + i*4). Unlike arrays, we can not do random access in the linked list. Quick Sort requires a lot of this kind of access. In linked list to access i\u2019th index, we have to travel each and every node from the head to i\u2019th node as we don\u2019t have a continuous block of memory. Therefore, the overhead increases for quicksort. Merge sort accesses data sequentially and the need of random access is low.\n\n  2. <a href="https://www.geeksforgeeks.org/counting-inversions/" target="_blank">Inversion Count Problem</a>\n\n  3. <a href="https://en.wikipedia.org/wiki/External_sorting" target="_blank">Used in External Sorting</a>\n  ',this.mergeSortCode='\n  #include<stdlib.h>\n  #include<stdio.h>\n\n  // Merges two subarrays of arr[].\n  // First subarray is arr[l..m]\n  // Second subarray is arr[m+1..r]\n  void merge(int arr[], int l, int m, int r)\n  {\n    int i, j, k;\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    /* create temp arrays */\n    int L[n1], R[n2];\n\n    /* Copy data to temp arrays L[] and R[] */\n    for (i = 0; i < n1; i++)\n      L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n      R[j] = arr[m + 1+ j];\n\n    /* Merge the temp arrays back into arr[l..r]*/\n    i = 0; // Initial index of first subarray\n    j = 0; // Initial index of second subarray\n    k = l; // Initial index of merged subarray\n    while (i < n1 && j < n2)\n    {\n      if (L[i] <= R[j])\n      {\n        arr[k] = L[i];\n        i++;\n      }\n      else\n      {\n        arr[k] = R[j];\n        j++;\n      }\n      k++;\n    }\n\n    /* Copy the remaining elements of L[], if there\n    are any */\n    while (i < n1)\n    {\n      arr[k] = L[i];\n      i++;\n      k++;\n    }\n\n    /* Copy the remaining elements of R[], if there\n    are any */\n    while (j < n2)\n    {\n      arr[k] = R[j];\n      j++;\n      k++;\n    }\n  }\n\n  /* l is for left index and r is right index of the\n  sub-array of arr to be sorted */\n  void mergeSort(int arr[], int l, int r)\n  {\n    if (l < r)\n    {\n      // Same as (l+r)/2, but avoids overflow for\n      // large l and h\n      int m = l+(r-l)/2;\n\n      // Sort first and second halves\n      mergeSort(arr, l, m);\n      mergeSort(arr, m+1, r);\n\n      merge(arr, l, m, r);\n    }\n  }\n\n  /* UTILITY FUNCTIONS */\n  /* Function to print an array */\n  void printArray(int A[], int size)\n  {\n    int i;\n    for (i=0; i < size; i++)\n      printf("%d ", A[i]);\n    printf("\\n");\n  }\n\n  /* Driver program to test above functions */\n  int main()\n  {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int arr_size = sizeof(arr)/sizeof(arr[0]);\n\n    printf("Given array is \\n");\n    printArray(arr, arr_size);\n\n    mergeSort(arr, 0, arr_size - 1);\n\n    printf("\\nSorted array is \\n");\n    printArray(arr, arr_size);\n    return 0;\n  }\n  ',this.selectionSortExplanation="\nThe selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning.\nThe algorithm maintains two subarrays in a given array.\n  1) The subarray which is already sorted.\n  2) Remaining subarray which is unsorted.\n\nIn every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray.\n\nFollowing example explains the above steps:\n\narr[] = 64 25 12 22 11\n\nFind the minimum element in arr[0...4] and place it at beginning\n11 25 12 22 64\n\nFind the minimum element in arr[1...4] and place it at beginning of arr[1...4]\n11 12 25 22 64\n\nFind the minimum element in arr[2...4] and place it at beginning of arr[2...4]\n11 12 22 25 64\n\nFind the minimum element in arr[3...4] and place it at beginning of arr[3...4]\n11 12 22 25 64\n\nTime Complexity: O(n^2) as there are two nested loops.\n\nAuxiliary Space: O(1)\nThe good thing about selection sort is it never makes more than O(n) swaps and can be useful when memory write is a costly operation.\n  ",this.selectionSortCode='\n  // C++ program for implementation of selection sort\n  #include <bits/stdc++.h>\n  using namespace std;\n\n  void swap(int *xp, int *yp)\n  {\n    int temp = *xp;\n    *xp = *yp;\n    *yp = temp;\n  }\n\n  void selectionSort(int arr[], int n)\n  {\n    int i, j, min_idx;\n\n    // One by one move boundary of unsorted subarray\n    for (i = 0; i < n-1; i++)\n    {\n      // Find the minimum element in unsorted array\n      min_idx = i;\n      for (j = i+1; j < n; j++)\n      if (arr[j] < arr[min_idx])\n        min_idx = j;\n\n      // Swap the found minimum element with the first element\n      swap(&arr[min_idx], &arr[i]);\n    }\n  }\n\n  /* Function to print an array */\n  void printArray(int arr[], int size)\n  {\n    int i;\n    for (i=0; i < size; i++)\n      cout << arr[i] << " ";\n    cout << endl;\n  }\n\n  // Driver program to test above functions\n  int main()\n  {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    selectionSort(arr, n);\n    cout << "Sorted array: \\n";\n    printArray(arr, n);\n    return 0;\n  }\n  ',this.heapSortExplanation='\nHeap sort is a comparison based sorting technique based on Binary Heap data structure.\nIt is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for remaining element.\n\nComplete Binary Tree:\n  A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\n\nBinary Heap:\n  A Binary Heap is a Complete Binary Tree where items are stored in a special order such that value in a parent node is greater(or smaller) than the values in its two children nodes. The former is called as max heap and the latter is called min heap. The heap can be represented by binary tree or array.\n\nWhy array based representation for Binary Heap?\n  Since a Binary Heap is a Complete Binary Tree, it can be easily represented as array and array based representation is space efficient. If the parent node is stored at index I, the left child can be calculated by 2 * I + 1 and right child by 2 * I + 2 (assuming the indexing starts at 0).\n\nHeap Sort Algorithm for sorting in increasing order:\n  1. Build a max heap from the input data.\n  2. At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap followed by reducing the size of heap by One. Finally, heapify the root of tree.\n  3. Repeat above steps while size of heap is greater than 1.\n\nHow to build the heap?\n  Heapify procedure can be applied to a node only if its children nodes are heapified. So the heapification must be performed in the bottom up order.\n\nLets understand with the help of an example:\n\nInput data: 4, 10, 3, 5, 1\n          4(0)\n        /   \\\n      10(1)   3(2)\n    /   \\\n  5(3)    1(4)\n\nThe numbers in bracket represent the indices in the array representation of data.\n\nApplying heapify procedure to index 1:\n          4(0)\n        /   \\\n    10(1)    3(2)\n    /   \\\n5(3)    1(4)\n\nApplying heapify procedure to index 0:\n        10(0)\n        /  \\\n      5(1)  3(2)\n    /   \\\n  4(3)   1(4)\nThe heapify procedure calls itself recursively to build heap in top down manner.\n\nNote:\nHeap sort is an in-place algorithm.\nIts typical implementation is not stable, but can be made stable (See <a target="_blank" href="https://www.geeksforgeeks.org/stability-in-sorting-algorithms/">this</a>)\n\nTime Complexity: Time complexity of heapify is O(Logn). Time complexity of createAndBuildHeap() is O(n) and overall time complexity of Heap Sort is O(nLogn).\n\nApplications of HeapSort\n  1.<a target="_blank" href="https://www.geeksforgeeks.org/nearly-sorted-algorithm/"> Sort a nearly sorted (or K sorted) array</a>\n  2.<a target="_blank" href="https://www.geeksforgeeks.org/k-largestor-smallest-elements-in-an-array/"> k largest(or smallest) elements in an array </a>\n\nHeap sort algorithm has limited uses because Quicksort and Mergesort are better in practice. Nevertheless, the Heap data structure itself is enormously used. See <a target="_blank" href="https://www.geeksforgeeks.org/applications-of-heap-data-structure/"> Applications of Heap Data Structure <a>\n  ',this.heapSortCode='\n  // C++ program for implementation of Heap Sort\n  #include <iostream>\n\n  using namespace std;\n\n  // To heapify a subtree rooted with node i which is\n  // an index in arr[]. n is size of heap\n  void heapify(int arr[], int n, int i)\n  {\n    int largest = i; // Initialize largest as root\n    int l = 2*i + 1; // left = 2*i + 1\n    int r = 2*i + 2; // right = 2*i + 2\n\n    // If left child is larger than root\n    if (l < n && arr[l] > arr[largest])\n      largest = l;\n\n    // If right child is larger than largest so far\n    if (r < n && arr[r] > arr[largest])\n      largest = r;\n\n    // If largest is not root\n    if (largest != i)\n    {\n      swap(arr[i], arr[largest]);\n\n      // Recursively heapify the affected sub-tree\n      heapify(arr, n, largest);\n    }\n  }\n\n  // main function to do heap sort\n  void heapSort(int arr[], int n)\n  {\n    // Build heap (rearrange array)\n    for (int i = n / 2 - 1; i >= 0; i--)\n      heapify(arr, n, i);\n\n    // One by one extract an element from heap\n    for (int i=n-1; i>=0; i--)\n    {\n      // Move current root to end\n      swap(arr[0], arr[i]);\n\n      // call max heapify on the reduced heap\n      heapify(arr, i, 0);\n    }\n  }\n\n  /* A utility function to print array of size n */\n  void printArray(int arr[], int n)\n  {\n    for (int i=0; i<n; ++i)\n      cout << arr[i] << " ";\n    cout << "\\n";\n  }\n\n  // Driver program\n  int main()\n  {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    heapSort(arr, n);\n\n    cout << "Sorted array is \\n";\n    printArray(arr, n);\n  }\n\n  '}}var x=t("Rcsm");class k{constructor(n){this.highlightService=n,this.algorithms=[],this.algorithmNames=["Bubble Sort","Insertion Sort","Quick Sort","Merge Sort","Heap Sort","Selection Sort"],this.selectedAlgorithm=this.algorithmNames[0],this.samplesCount=20,this.maxSamplesCount=30,this.minValue=1,this.maxValue=100,this.values=[],this.speed=700,this.maxSpeed=1500,this.visualizing=!1,this.customPanelOpened=!1,this.customValue=null,this.codePanelOpened=!1,this.sortingAlgorithms=new w,this.algorithmCode="",this.algorithmExplanation="",this.algorithms={"Bubble Sort":{name:"Bubble Sort",run:()=>this.bubbleSort(this.values),code:this.sortingAlgorithms.bubbleSortCode,explanation:this.sortingAlgorithms.bubbleSortExplanation},"Insertion Sort":{name:"Insertion Sort",run:()=>this.insertionSort(this.values),code:this.sortingAlgorithms.insertionSortCode,explanation:this.sortingAlgorithms.insertionSortExplanation},"Quick Sort":{name:"Quick Sort",run:()=>this.quickSort(this.values),code:this.sortingAlgorithms.quickSortCode,explanation:this.sortingAlgorithms.quickSortExplanation},"Merge Sort":{name:"Merge Sort",run:()=>this.mergeSort(this.values),code:this.sortingAlgorithms.mergeSortCode,explanation:this.sortingAlgorithms.mergeSortExplanation},"Heap Sort":{name:"Heap Sort",run:()=>this.heapSort(this.values),code:this.sortingAlgorithms.heapSortCode,explanation:this.sortingAlgorithms.heapSortExplanation},"Selection Sort":{name:"Selection Sort",run:()=>this.selectionSort(this.values),code:this.sortingAlgorithms.selectionSortCode,explanation:this.sortingAlgorithms.selectionSortExplanation}}}ngOnInit(){for(let n=1;n<=this.samplesCount;n++)this.values.push(Math.floor(Math.random()*(this.maxValue-this.minValue+1)+this.minValue))}ngAfterViewInit(){}onHistogramReady(n){this.board=n,this.maxSamplesCount=Math.ceil((this.board.width-4)/9)}updateSpeed(n){this.speed=n.value}updateSamplesCount(n){this.customPanelOpened=!1,this.samplesCount=n.value,this.randomize()}updateMaxValue(n){this.customPanelOpened=!1,this.maxValue=n.value,this.randomize()}addCustomValue(){null===this.customValue||this.customValue<=0||this.customValue>999||(this.values.push(this.customValue),this.histogram.adjustBoardParams(),this.histogram.drawBoard(),this.customValue=null)}removeCustomValue(){if(null===this.customValue||this.customValue<=0||this.customValue>999)return;const n=this.values.findIndex(n=>n===this.customValue);n>=0&&this.values.splice(n,1),this.histogram.drawBoard()}toggleCustomPanel(){this.customPanelOpened=!this.customPanelOpened,this.values=[],this.histogram.boardContext.clearRect(0,0,this.board.width,this.board.height),this.customPanelOpened||this.randomize()}toggleCodePanel(){this.codePanelOpened=!this.codePanelOpened,this.algorithmCode=this.highlightService.highlightCode(this.algorithms[this.selectedAlgorithm].code,"cpp"),this.algorithmExplanation=this.algorithms[this.selectedAlgorithm].explanation}randomize(){this.customPanelOpened=!1,this.values=[];for(let n=1;n<=this.samplesCount;n++)this.values.push(Math.floor(Math.random()*(this.maxValue-this.minValue+1)+this.minValue));this.histogram.values=this.values,this.histogram.adjustBoardParams(),this.histogram.drawBoard()}shuffleValues(){const n=[];for(let e=1;e<=this.values.length;e++){let e;do{e=Math.floor(Math.random()*this.values.length)}while(-1!==n.findIndex(n=>n===e));n.push(e)}for(let e=0;e<this.values.length;e++)n[e]=this.values[n[e]];this.values=n,this.histogram.values=this.values,this.histogram.drawBoard()}eachStep(n,e){return y.a(this,void 0,void 0,function*(){return!!this.visualizing&&(this.values=n,this.histogram.drawBoard(e),yield x.a.delay(this.maxSpeed-this.speed),!0)})}toggleVisualize(){return y.a(this,void 0,void 0,function*(){this.visualizing?this.visualizing=!1:this.algorithms[this.selectedAlgorithm].run()})}bubbleSort(n){return y.a(this,void 0,void 0,function*(){this.visualizing=!0;for(let e=0;e<n.length;e++){let t=!1;for(let i=0;i<n.length-e-1;i++){const e=new p;if(e.ind1=i,e.ind2=i+1,e.swapped=!1,!(yield this.eachStep(n,e)))return;if(n[i]>n[i+1]&&(t=!0,n[i+1]=[n[i],n[i]=n[i+1]][0],e.swapped=!0,!(yield this.eachStep(n,e))))return}if(!t)break}this.visualizing=!1})}quickSort(n){return y.a(this,void 0,void 0,function*(){this.visualizing=!0,yield this.quickSortUtil(n,0,n.length-1),this.visualizing=!1})}quickSortUtil(n,e,t){return y.a(this,void 0,void 0,function*(){let i;return e<t&&(i=yield this.partition(n,e,t),yield this.quickSortUtil(n,e,i-1),yield this.quickSortUtil(n,i+1,t)),n})}partition(n,e,t){return y.a(this,void 0,void 0,function*(){let i=n[t],l=e-1,r=e,a=t;const o=new p;for(o.ind3=a,o.leftBoundary=e,o.rightBoundary=t,r=e;r<=t-1;r++){if(o.ind1=l+1,o.ind2=r,o.swapped=!1,!(yield this.eachStep(n,o)))return;if(n[r]<i&&(n[++l]=[n[r],n[r]=n[l]][0],l!==r&&(o.ind1=l,o.ind2=r,o.swapped=!0,!(yield this.eachStep(n,o)))))return}if(n[l+1]=[n[a],n[a]=n[l+1]][0],o.ind1=l+1,o.ind2=a,o.swapped=!1,(yield this.eachStep(n,o))&&(l+1===a||(o.swapped=!0,yield this.eachStep(n,o))))return l+1})}mergeSort(n){return y.a(this,void 0,void 0,function*(){this.visualizing=!0,yield this.mergeSortUtil(n,0,this.values.length-1),this.visualizing=!1})}mergeSortUtil(n,e,t){return y.a(this,void 0,void 0,function*(){if(!this.visualizing)return n;if(e<t){const i=Math.floor(e+(t-e)/2),l=new p;return l.swapped=!1,l.leftBoundary=e,l.rightBoundary=i,l.leftBoundary2=i+1,l.rightBoundary2=t,(yield this.eachStep(n,l))?(n=yield this.mergeSortUtil(n,e,i),n=yield this.mergeSortUtil(n,i+1,t),yield this.merge(n,e,i,t)):n}return n})}merge(n,e,t,i){return y.a(this,void 0,void 0,function*(){if(!this.visualizing)return;let l,r,a;const o=t-e+1,s=i-t,u=[],d=[];for(l=0;l<o;l++)u.push(n[e+l]);for(r=0;r<s;r++)d.push(n[t+1+r]);const h=new p;for(h.swapped=!1,h.leftBoundary=e,h.rightBoundary=t,h.leftBoundary2=t+1,h.rightBoundary2=i,l=0,r=0,a=e;l<o&&r<s;){if(h.ind1=e+l,h.ind2=t+1+r,h.ind3=a,!(yield this.eachStep(n,h)))return;if(u[l]<=d[r]){if(n[a]=u[l],l++,!(yield this.eachStep(n,h)))return;h.ind1=e+l}else{if(n[a]=d[r],r++,!(yield this.eachStep(n,h)))return;h.ind2=t+1+r}a++}for(;l<o;){if(n[a]=u[l],l++,a++,!(yield this.eachStep(n,h)))return;h.ind1=e+l}for(;r<s;){if(n[a]=d[r],r++,a++,!(yield this.eachStep(n,h)))return;h.ind2=t+1+r}return n})}insertionSort(n){return y.a(this,void 0,void 0,function*(){this.visualizing=!0;const e=new p;let t;for(let i=0;i<n.length;++i){if(!this.visualizing)return;t=n[i];let l=i-1;if(e.ind1=l,e.ind2=l+1,e.swapped=!1,!(yield this.eachStep(n,e)))return;for(;l>=0&&n[l]>t;){if(!this.visualizing)return;if(n[l+1]=n[l],n[l]=t,e.swapped=!0,!(yield this.eachStep(n,e)))return;if(e.ind1=--l,e.ind2=l+1,e.swapped=!1,!(yield this.eachStep(n,e)))return}}this.visualizing=!1})}selectionSort(n){return y.a(this,void 0,void 0,function*(){const e=new p;e.swapped=!1,this.visualizing=!0;for(let t=0;t<n.length-1;t++){let i=t;e.ind1=t,e.ind3=i;for(let l=t+1;l<n.length;l++)if(n[l]<n[i]&&(i=l),e.ind3=i,e.ind2=l,!(yield this.eachStep(n,e)))return;if(n[t]!=n[i]){if(n[t]=[n[i],n[i]=n[t]][0],e.swapped=!0,e.ind3=null,e.ind2=i,!(yield this.eachStep(n,e)))return;e.swapped=!1}}this.visualizing=!1})}heapify(n,e,t){return y.a(this,void 0,void 0,function*(){const i=new p;let l=t;const r=2*t+1,a=2*t+2;if(i.ind3=l,i.ind1=r,i.ind2=a,r<e&&a<e&&!(yield this.eachStep(n,i)))return!1;if(r<e&&n[r]>n[l]&&(l=r),a<e&&n[a]>n[l]&&(l=a),l!=t){if(n[t]=[n[l],n[l]=n[t]][0],i.ind3=null,i.ind1=t,i.ind2=l,i.swapped=!0,!(yield this.eachStep(n,i)))return!1;if(i.swapped=!1,!(yield this.heapify(n,e,l)))return!1}return!0})}heapSort(n){return y.a(this,void 0,void 0,function*(){const e=n.length,t=new p;this.visualizing=!0;for(let i=Math.floor(e/2)-1;i>=0;i--)if(!(yield this.heapify(n,e,i)))return;for(let i=e-1;i>=0;i--){if(t.ind1=0,t.ind2=i,!(yield this.eachStep(n,t)))return;if(n[i]=[n[0],n[0]=n[i]][0],t.ind1=0,t.ind2=i,t.swapped=!0,!(yield this.eachStep(n,t)))return;if(t.swapped=!1,!(yield this.heapify(n,i,0)))return}this.visualizing=!1})}}var S=t("SrJx"),C=i.qb({encapsulation:0,styles:[[".submain-container[_ngcontent-%COMP%]   .toolbar[_ngcontent-%COMP%]     .mat-accent .mat-slider-thumb{background-color:#d168ff}.submain-container[_ngcontent-%COMP%]   .toolbar[_ngcontent-%COMP%]     .mat-accent .mat-slider-thumb-label{background-color:#d168ff}.submain-container[_ngcontent-%COMP%]   .toolbar[_ngcontent-%COMP%]     .mat-accent .mat-slider-track-fill{background-color:#d168ff}"]],data:{}});function E(n){return i.Lb(0,[(n()(),i.sb(0,0,null,null,3,"option",[],[[8,"disabled",0]],null,null,null,null)),i.rb(1,147456,null,0,a.i,[i.k,i.D,[2,a.k]],{value:[0,"value"]},null),i.rb(2,147456,null,0,a.n,[i.k,i.D,[8,null]],{value:[0,"value"]},null),(n()(),i.Kb(3,null,[" "," "]))],function(n,e){n(e,1,0,e.context.$implicit),n(e,2,0,e.context.$implicit)},function(n,e){n(e,0,0,e.component.visualizing),n(e,3,0,e.context.$implicit)})}function _(n){return i.Lb(0,[(n()(),i.sb(0,0,null,null,1,"span",[],null,null,null,null,null)),(n()(),i.Kb(-1,null,["Stop"]))],null,null)}function I(n){return i.Lb(0,[(n()(),i.Kb(-1,null,["Visualize"]))],null,null)}function M(n){return i.Lb(0,[(n()(),i.sb(0,0,null,null,13,"div",[["class","custom-panel"]],null,null,null,null,null)),(n()(),i.sb(1,0,null,null,6,"input",[["class","custom-value"],["max","999"],["min","1"],["placeholder","Enter custom value"],["type","number"]],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngModelChange"],[null,"input"],[null,"blur"],[null,"compositionstart"],[null,"compositionend"],[null,"change"]],function(n,e,t){var l=!0,r=n.component;return"input"===e&&(l=!1!==i.Eb(n,2)._handleInput(t.target.value)&&l),"blur"===e&&(l=!1!==i.Eb(n,2).onTouched()&&l),"compositionstart"===e&&(l=!1!==i.Eb(n,2)._compositionStart()&&l),"compositionend"===e&&(l=!1!==i.Eb(n,2)._compositionEnd(t.target.value)&&l),"change"===e&&(l=!1!==i.Eb(n,3).onChange(t.target.value)&&l),"input"===e&&(l=!1!==i.Eb(n,3).onChange(t.target.value)&&l),"blur"===e&&(l=!1!==i.Eb(n,3).onTouched()&&l),"ngModelChange"===e&&(l=!1!==(r.customValue=t)&&l),l},null,null)),i.rb(2,16384,null,0,a.b,[i.D,i.k,[2,a.a]],null,null),i.rb(3,16384,null,0,a.j,[i.D,i.k],null,null),i.Hb(1024,null,a.e,function(n,e){return[n,e]},[a.b,a.j]),i.rb(5,671744,null,0,a.h,[[8,null],[8,null],[8,null],[6,a.e]],{model:[0,"model"]},{update:"ngModelChange"}),i.Hb(2048,null,a.f,null,[a.h]),i.rb(7,16384,null,0,a.g,[[4,a.f]],null,null),(n()(),i.sb(8,0,null,null,2,"button",[["class","edit-button"]],null,[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.addCustomValue()&&i),i},null,null)),(n()(),i.sb(9,0,null,null,1,"span",[],null,null,null,null,null)),(n()(),i.Kb(-1,null,["+"])),(n()(),i.sb(11,0,null,null,2,"button",[["class","edit-button"]],null,[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.removeCustomValue()&&i),i},null,null)),(n()(),i.sb(12,0,null,null,1,"span",[],null,null,null,null,null)),(n()(),i.Kb(-1,null,["-"]))],function(n,e){n(e,5,0,e.component.customValue)},function(n,e){n(e,1,0,i.Eb(e,7).ngClassUntouched,i.Eb(e,7).ngClassTouched,i.Eb(e,7).ngClassPristine,i.Eb(e,7).ngClassDirty,i.Eb(e,7).ngClassValid,i.Eb(e,7).ngClassInvalid,i.Eb(e,7).ngClassPending)})}function z(n){return i.Lb(0,[(n()(),i.sb(0,0,null,null,13,"div",[["class","code-panel"]],null,null,null,null,null)),(n()(),i.sb(1,0,null,null,1,"button",[["class","closeCodePanel"]],null,[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.toggleCodePanel()&&i),i},null,null)),(n()(),i.Kb(-1,null,[" X "])),(n()(),i.sb(3,0,null,null,4,"div",[["class","code-explanation-wrapper"]],null,null,null,null,null)),(n()(),i.sb(4,0,null,null,1,"div",[["class","code-explanation-heading"]],null,null,null,null,null)),(n()(),i.Kb(5,null,["",""])),(n()(),i.sb(6,0,null,null,1,"pre",[["class","code-explanation wrap-pre-tag-text"]],[[8,"innerHTML",1]],null,null,null,null)),(n()(),i.Kb(-1,null,["                "])),(n()(),i.sb(8,0,null,null,5,"div",[["class","code-wrapper"]],null,null,null,null,null)),(n()(),i.sb(9,0,null,null,4,"pre",[],null,null,null,null,null)),(n()(),i.Kb(-1,null,["                "])),(n()(),i.sb(11,0,null,null,1,"code",[["class","code"]],[[8,"innerHTML",1]],null,null,null,null)),(n()(),i.Kb(-1,null,["\n                "])),(n()(),i.Kb(-1,null,["\n                "]))],null,function(n,e){var t=e.component;n(e,5,0,t.selectedAlgorithm),n(e,6,0,t.algorithmExplanation),n(e,11,0,t.algorithmCode)})}function P(n){return i.Lb(0,[i.Ib(671088640,1,{histogram:0}),(n()(),i.sb(1,0,null,null,73,"div",[["class","submain-container"]],null,null,null,null,null)),(n()(),i.sb(2,0,null,null,2,"div",[["class","header"]],null,null,null,null,null)),(n()(),i.sb(3,0,null,null,1,"div",[["class","brand"]],null,null,null,null,null)),(n()(),i.Kb(-1,null,[" Sorting Algorithms Visualizer "])),(n()(),i.sb(5,0,null,null,60,"div",[["class","toolbar"]],null,null,null,null,null)),(n()(),i.sb(6,0,null,null,59,"nav",[["class","navbar navbar-expand-lg"]],null,null,null,null,null)),(n()(),i.sb(7,0,null,null,1,"button",[["class","navbar-toggler"],["data-target","#navbarContent"],["data-toggle","collapse"],["type","button"]],null,null,null,null,null)),(n()(),i.sb(8,0,null,null,0,"i",[["class","fa fa-bars togglerIcon"]],null,null,null,null,null)),(n()(),i.sb(9,0,null,null,56,"div",[["class","collapse navbar-collapse"],["id","navbarContent"]],null,null,null,null,null)),(n()(),i.sb(10,0,null,null,55,"div",[["class","navWrapper row col-md-12"]],null,null,null,null,null)),(n()(),i.sb(11,0,null,null,3,"div",[["class","col-lg-1 col-md-2  col-sm-4 btn btn-primary navItem"]],null,[[null,"click"]],function(n,e,t){var l=!0;return"click"===e&&(l=!1!==i.Eb(n,12).onClick()&&l),l},null,null)),i.rb(12,16384,null,0,o.l,[o.k,o.a,[8,null],i.D,i.k],{routerLink:[0,"routerLink"]},null),i.Fb(13,1),(n()(),i.Kb(-1,null,[" Home "])),(n()(),i.sb(15,0,null,null,8,"div",[["class","col-lg-2 col-md-3 col-sm-4 navItem p-0"]],null,null,null,null,null)),(n()(),i.sb(16,0,null,null,7,"select",[],[[2,"ng-untouched",null],[2,"ng-touched",null],[2,"ng-pristine",null],[2,"ng-dirty",null],[2,"ng-valid",null],[2,"ng-invalid",null],[2,"ng-pending",null]],[[null,"ngModelChange"],[null,"change"],[null,"blur"]],function(n,e,t){var l=!0,r=n.component;return"change"===e&&(l=!1!==i.Eb(n,17).onChange(t.target.value)&&l),"blur"===e&&(l=!1!==i.Eb(n,17).onTouched()&&l),"ngModelChange"===e&&(l=!1!==(r.selectedAlgorithm=t)&&l),l},null,null)),i.rb(17,16384,null,0,a.k,[i.D,i.k],null,null),i.Hb(1024,null,a.e,function(n){return[n]},[a.k]),i.rb(19,671744,null,0,a.h,[[8,null],[8,null],[8,null],[6,a.e]],{model:[0,"model"]},{update:"ngModelChange"}),i.Hb(2048,null,a.f,null,[a.h]),i.rb(21,16384,null,0,a.g,[[4,a.f]],null,null),(n()(),i.hb(16777216,null,null,1,null,E)),i.rb(23,278528,null,0,s.j,[i.O,i.L,i.r],{ngForOf:[0,"ngForOf"]},null),(n()(),i.sb(24,0,null,null,1,"button",[["class","btn btn-secondary col-lg-2 col-md-2 col-sm-4 navItem"]],[[8,"disabled",0]],[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.shuffleValues()&&i),i},null,null)),(n()(),i.Kb(-1,null,[" Shuffle "])),(n()(),i.sb(26,0,null,null,1,"button",[["class","btn btn-danger col-lg-2 col-md-2 col-sm-4 navItem"]],[[8,"disabled",0]],[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.randomize()&&i),i},null,null)),(n()(),i.Kb(-1,null,[" Randomize "])),(n()(),i.sb(28,0,null,null,6,"button",[],null,[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.toggleVisualize()&&i),i},null,null)),i.Hb(512,null,s.z,s.A,[i.r,i.s,i.k,i.D]),i.rb(30,278528,null,0,s.i,[s.z],{ngClass:[0,"ngClass"]},null),i.Gb(31,{"btn-success":0,"btn-danger":1,"btn col-lg-1 col-md-2 col-sm-4 navItem":2}),(n()(),i.hb(16777216,null,null,1,null,_)),i.rb(33,16384,null,0,s.k,[i.O,i.L],{ngIf:[0,"ngIf"],ngIfElse:[1,"ngIfElse"]},null),(n()(),i.hb(0,[["visualize",2]],null,0,null,I)),(n()(),i.sb(35,0,null,null,4,"button",[],[[8,"disabled",0]],[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.toggleCustomPanel()&&i),i},null,null)),i.Hb(512,null,s.z,s.A,[i.r,i.s,i.k,i.D]),i.rb(37,278528,null,0,s.i,[s.z],{ngClass:[0,"ngClass"]},null),i.Gb(38,{"btn btn-info col-lg-1 col-md-2 col-sm-4 navItem":0}),(n()(),i.Kb(-1,null,[" Custom "])),(n()(),i.sb(40,0,null,null,4,"button",[],null,[[null,"click"]],function(n,e,t){var i=!0;return"click"===e&&(i=!1!==n.component.toggleCodePanel()&&i),i},null,null)),i.Hb(512,null,s.z,s.A,[i.r,i.s,i.k,i.D]),i.rb(42,278528,null,0,s.i,[s.z],{ngClass:[0,"ngClass"]},null),i.Gb(43,{"col-lg-1 col-md-2 col-sm-4 navItem show-code-button":0}),(n()(),i.Kb(-1,null,[" < / > "])),(n()(),i.sb(45,0,null,null,6,"div",[["class","col-lg-2 col-md-3 col-sm-4 navItem p-0"]],null,null,null,null,null)),(n()(),i.sb(46,0,null,null,2,":svg:svg",[["fill","white"],["style","width:30px;height:40px;"]],null,null,null,null,null)),(n()(),i.sb(47,0,null,null,0,":svg:path",[["d","M31.842,15.057c-0.264-0.265-0.689-0.265-0.953,0c-0.228,0.229-0.246,0.573-0.079,0.834l-3.007,3.008 c-0.089-0.061-0.187-0.105-0.279-0.157l0.904-3.373c0.309,0.014,0.6-0.177,0.682-0.485c0.1-0.36-0.114-0.729-0.476-0.825 c-0.36-0.098-0.729,0.116-0.825,0.478c-0.083,0.311,0.073,0.618,0.351,0.762l-0.888,3.307c-0.371-0.164-0.778-0.263-1.207-0.287 c-3.048-0.168-2.584,3.011-3.806,3.01c-0.285,0-1.716-0.646-1.716-0.646l-0.982,0.201c-3.417,0.497-6.636-1.889-6.76-1.98 l-0.39-0.296c0,0-0.661,1.275-1.829,1.912c-0.865,0.47-1.861,0.567-2.545,0.567c-1.251,0-2.832-0.349-3.539-1.128 c-0.111-0.123-0.199-0.256-0.301-0.383c-3.606,1.845-5.085,4.896-3.663,4.896c2.315,0,25.529,0,25.529,0 c1.698,0,3.075-1.378,3.075-3.076c0-0.951-0.44-1.762-1.119-2.316l2.986-2.988c0.261,0.169,0.605,0.148,0.835-0.078 C32.106,15.748,32.106,15.32,31.842,15.057z M25.71,20.926c-0.372,0-0.674-0.302-0.674-0.674s0.302-0.674,0.674-0.674 s0.674,0.302,0.674,0.674S26.083,20.926,25.71,20.926z"]],null,null,null,null,null)),(n()(),i.sb(48,0,null,null,0,":svg:path",[["d","M10.259,19.925c2.863-1.558,1.811-7.37-1.684-5.348c3.494-2.905,4.963,2.837,4.633,3.785c0,0,3.071,2.32,6.253,1.853 c0-4.033-1.423-10.616-7.265-12.29C4.408,5.693,0.45,14.493,4.998,19.504C5.766,20.35,8.602,20.828,10.259,19.925z"]],null,null,null,null,null)),(n()(),i.sb(49,0,null,null,2,"mat-slider",[["class","mat-slider"],["min","0"],["role","slider"]],[[8,"tabIndex",0],[1,"aria-disabled",0],[1,"aria-valuemax",0],[1,"aria-valuemin",0],[1,"aria-valuenow",0],[1,"aria-orientation",0],[2,"mat-slider-disabled",null],[2,"mat-slider-has-ticks",null],[2,"mat-slider-horizontal",null],[2,"mat-slider-axis-inverted",null],[2,"mat-slider-sliding",null],[2,"mat-slider-thumb-label-showing",null],[2,"mat-slider-vertical",null],[2,"mat-slider-min-value",null],[2,"mat-slider-hide-last-tick",null],[2,"_mat-animation-noopable",null]],[[null,"change"],[null,"focus"],[null,"blur"],[null,"mousedown"],[null,"keydown"],[null,"keyup"],[null,"mouseenter"],[null,"slide"],[null,"slideend"],[null,"slidestart"],[null,"selectstart"]],function(n,e,t){var l=!0,r=n.component;return"focus"===e&&(l=!1!==i.Eb(n,51)._onFocus()&&l),"blur"===e&&(l=!1!==i.Eb(n,51)._onBlur()&&l),"mousedown"===e&&(l=!1!==i.Eb(n,51)._onMousedown(t)&&l),"keydown"===e&&(l=!1!==i.Eb(n,51)._onKeydown(t)&&l),"keyup"===e&&(l=!1!==i.Eb(n,51)._onKeyup()&&l),"mouseenter"===e&&(l=!1!==i.Eb(n,51)._onMouseenter()&&l),"slide"===e&&(l=!1!==i.Eb(n,51)._onSlide(t)&&l),"slideend"===e&&(l=!1!==i.Eb(n,51)._onSlideEnd()&&l),"slidestart"===e&&(l=!1!==i.Eb(n,51)._onSlideStart(t)&&l),"selectstart"===e&&(l=!1!==t.preventDefault()&&l),"change"===e&&(l=!1!==r.updateSpeed(t)&&l),l},u.b,u.a)),i.Hb(5120,null,a.e,function(n){return[n]},[d.a]),i.rb(51,245760,null,0,d.a,[i.k,h.a,i.h,[2,c.b],[8,null],[2,m.a]],{max:[0,"max"],min:[1,"min"],value:[2,"value"]},{change:"change"}),(n()(),i.sb(52,0,null,null,6,"div",[["class","col-lg-2 col-md-3 col-sm-4 navItem p-0"]],null,null,null,null,null)),(n()(),i.sb(53,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),i.sb(54,0,null,null,1,"span",[["style","color:white;padding: 10px 0px 10px 20px"]],null,null,null,null,null)),(n()(),i.Kb(-1,null,["N"])),(n()(),i.sb(56,0,null,null,2,"mat-slider",[["class","mat-slider"],["min","1"],["role","slider"],["thumbLabel",""],["tickInterval","1"]],[[8,"tabIndex",0],[1,"aria-disabled",0],[1,"aria-valuemax",0],[1,"aria-valuemin",0],[1,"aria-valuenow",0],[1,"aria-orientation",0],[2,"mat-slider-disabled",null],[2,"mat-slider-has-ticks",null],[2,"mat-slider-horizontal",null],[2,"mat-slider-axis-inverted",null],[2,"mat-slider-sliding",null],[2,"mat-slider-thumb-label-showing",null],[2,"mat-slider-vertical",null],[2,"mat-slider-min-value",null],[2,"mat-slider-hide-last-tick",null],[2,"_mat-animation-noopable",null]],[[null,"change"],[null,"focus"],[null,"blur"],[null,"mousedown"],[null,"keydown"],[null,"keyup"],[null,"mouseenter"],[null,"slide"],[null,"slideend"],[null,"slidestart"],[null,"selectstart"]],function(n,e,t){var l=!0,r=n.component;return"focus"===e&&(l=!1!==i.Eb(n,58)._onFocus()&&l),"blur"===e&&(l=!1!==i.Eb(n,58)._onBlur()&&l),"mousedown"===e&&(l=!1!==i.Eb(n,58)._onMousedown(t)&&l),"keydown"===e&&(l=!1!==i.Eb(n,58)._onKeydown(t)&&l),"keyup"===e&&(l=!1!==i.Eb(n,58)._onKeyup()&&l),"mouseenter"===e&&(l=!1!==i.Eb(n,58)._onMouseenter()&&l),"slide"===e&&(l=!1!==i.Eb(n,58)._onSlide(t)&&l),"slideend"===e&&(l=!1!==i.Eb(n,58)._onSlideEnd()&&l),"slidestart"===e&&(l=!1!==i.Eb(n,58)._onSlideStart(t)&&l),"selectstart"===e&&(l=!1!==t.preventDefault()&&l),"change"===e&&(l=!1!==r.updateSamplesCount(t)&&l),l},u.b,u.a)),i.Hb(5120,null,a.e,function(n){return[n]},[d.a]),i.rb(58,245760,null,0,d.a,[i.k,h.a,i.h,[2,c.b],[8,null],[2,m.a]],{disabled:[0,"disabled"],max:[1,"max"],min:[2,"min"],thumbLabel:[3,"thumbLabel"],tickInterval:[4,"tickInterval"],value:[5,"value"]},{change:"change"}),(n()(),i.sb(59,0,null,null,6,"div",[["class","col-lg-2 col-md-3 col-sm-4 navItem p-0"]],null,null,null,null,null)),(n()(),i.sb(60,0,null,null,5,"div",[["class","row"]],null,null,null,null,null)),(n()(),i.sb(61,0,null,null,1,"span",[["style","color:white;padding: 10px 0px 10px 20px"]],null,null,null,null,null)),(n()(),i.Kb(-1,null,["A"])),(n()(),i.sb(63,0,null,null,2,"mat-slider",[["class","mat-slider"],["max","999"],["min","1"],["role","slider"],["thumbLabel",""],["tickInterval","1"]],[[8,"tabIndex",0],[1,"aria-disabled",0],[1,"aria-valuemax",0],[1,"aria-valuemin",0],[1,"aria-valuenow",0],[1,"aria-orientation",0],[2,"mat-slider-disabled",null],[2,"mat-slider-has-ticks",null],[2,"mat-slider-horizontal",null],[2,"mat-slider-axis-inverted",null],[2,"mat-slider-sliding",null],[2,"mat-slider-thumb-label-showing",null],[2,"mat-slider-vertical",null],[2,"mat-slider-min-value",null],[2,"mat-slider-hide-last-tick",null],[2,"_mat-animation-noopable",null]],[[null,"change"],[null,"focus"],[null,"blur"],[null,"mousedown"],[null,"keydown"],[null,"keyup"],[null,"mouseenter"],[null,"slide"],[null,"slideend"],[null,"slidestart"],[null,"selectstart"]],function(n,e,t){var l=!0,r=n.component;return"focus"===e&&(l=!1!==i.Eb(n,65)._onFocus()&&l),"blur"===e&&(l=!1!==i.Eb(n,65)._onBlur()&&l),"mousedown"===e&&(l=!1!==i.Eb(n,65)._onMousedown(t)&&l),"keydown"===e&&(l=!1!==i.Eb(n,65)._onKeydown(t)&&l),"keyup"===e&&(l=!1!==i.Eb(n,65)._onKeyup()&&l),"mouseenter"===e&&(l=!1!==i.Eb(n,65)._onMouseenter()&&l),"slide"===e&&(l=!1!==i.Eb(n,65)._onSlide(t)&&l),"slideend"===e&&(l=!1!==i.Eb(n,65)._onSlideEnd()&&l),"slidestart"===e&&(l=!1!==i.Eb(n,65)._onSlideStart(t)&&l),"selectstart"===e&&(l=!1!==t.preventDefault()&&l),"change"===e&&(l=!1!==r.updateMaxValue(t)&&l),l},u.b,u.a)),i.Hb(5120,null,a.e,function(n){return[n]},[d.a]),i.rb(65,245760,null,0,d.a,[i.k,h.a,i.h,[2,c.b],[8,null],[2,m.a]],{disabled:[0,"disabled"],max:[1,"max"],min:[2,"min"],thumbLabel:[3,"thumbLabel"],tickInterval:[4,"tickInterval"],value:[5,"value"]},{change:"change"}),(n()(),i.sb(66,0,null,null,6,"div",[["class","section"]],null,null,null,null,null)),(n()(),i.hb(16777216,null,null,1,null,M)),i.rb(68,16384,null,0,s.k,[i.O,i.L],{ngIf:[0,"ngIf"]},null),(n()(),i.sb(69,0,null,null,1,"app-histogram",[],null,[[null,"historgramReady"],["window","resize"]],function(n,e,t){var l=!0,r=n.component;return"window:resize"===e&&(l=!1!==i.Eb(n,70).onWindowResize(t)&&l),"historgramReady"===e&&(l=!1!==r.onHistogramReady(t)&&l),l},v,g)),i.rb(70,4308992,[[1,4],["histogram",4]],0,b,[],{minValue:[0,"minValue"],maxValue:[1,"maxValue"],values:[2,"values"]},{historgramReady:"historgramReady"}),(n()(),i.hb(16777216,null,null,1,null,z)),i.rb(72,16384,null,0,s.k,[i.O,i.L],{ngIf:[0,"ngIf"]},null),(n()(),i.sb(73,0,null,null,1,"div",[["class","glow-footer"]],null,null,null,null,null)),(n()(),i.Kb(-1,null,[" while( !(success = try())); "]))],function(n,e){var t=e.component,l=n(e,13,0,"");n(e,12,0,l),n(e,19,0,t.selectedAlgorithm),n(e,23,0,t.algorithmNames);var r=n(e,31,0,!t.visualizing,t.visualizing,!0);n(e,30,0,r),n(e,33,0,t.visualizing,i.Eb(e,34));var a=n(e,38,0,!0);n(e,37,0,a);var o=n(e,43,0,!0);n(e,42,0,o),n(e,51,0,t.maxSpeed,"0",t.speed),n(e,58,0,t.visualizing,t.maxSamplesCount,"1","","1",t.samplesCount),n(e,65,0,t.visualizing,"999","1","","1",t.maxValue),n(e,68,0,t.customPanelOpened),n(e,70,0,t.minValue,t.maxValue,t.values),n(e,72,0,t.codePanelOpened)},function(n,e){var t=e.component;n(e,16,0,i.Eb(e,21).ngClassUntouched,i.Eb(e,21).ngClassTouched,i.Eb(e,21).ngClassPristine,i.Eb(e,21).ngClassDirty,i.Eb(e,21).ngClassValid,i.Eb(e,21).ngClassInvalid,i.Eb(e,21).ngClassPending),n(e,24,0,t.visualizing),n(e,26,0,t.visualizing),n(e,35,0,t.visualizing),n(e,49,1,[i.Eb(e,51).tabIndex,i.Eb(e,51).disabled,i.Eb(e,51).max,i.Eb(e,51).min,i.Eb(e,51).value,i.Eb(e,51).vertical?"vertical":"horizontal",i.Eb(e,51).disabled,i.Eb(e,51).tickInterval,!i.Eb(e,51).vertical,i.Eb(e,51)._invertAxis,i.Eb(e,51)._isSliding,i.Eb(e,51).thumbLabel,i.Eb(e,51).vertical,i.Eb(e,51)._isMinValue,i.Eb(e,51).disabled||i.Eb(e,51)._isMinValue&&i.Eb(e,51)._thumbGap&&i.Eb(e,51)._invertAxis,"NoopAnimations"===i.Eb(e,51)._animationMode]),n(e,56,1,[i.Eb(e,58).tabIndex,i.Eb(e,58).disabled,i.Eb(e,58).max,i.Eb(e,58).min,i.Eb(e,58).value,i.Eb(e,58).vertical?"vertical":"horizontal",i.Eb(e,58).disabled,i.Eb(e,58).tickInterval,!i.Eb(e,58).vertical,i.Eb(e,58)._invertAxis,i.Eb(e,58)._isSliding,i.Eb(e,58).thumbLabel,i.Eb(e,58).vertical,i.Eb(e,58)._isMinValue,i.Eb(e,58).disabled||i.Eb(e,58)._isMinValue&&i.Eb(e,58)._thumbGap&&i.Eb(e,58)._invertAxis,"NoopAnimations"===i.Eb(e,58)._animationMode]),n(e,63,1,[i.Eb(e,65).tabIndex,i.Eb(e,65).disabled,i.Eb(e,65).max,i.Eb(e,65).min,i.Eb(e,65).value,i.Eb(e,65).vertical?"vertical":"horizontal",i.Eb(e,65).disabled,i.Eb(e,65).tickInterval,!i.Eb(e,65).vertical,i.Eb(e,65)._invertAxis,i.Eb(e,65)._isSliding,i.Eb(e,65).thumbLabel,i.Eb(e,65).vertical,i.Eb(e,65)._isMinValue,i.Eb(e,65).disabled||i.Eb(e,65)._isMinValue&&i.Eb(e,65)._thumbGap&&i.Eb(e,65)._invertAxis,"NoopAnimations"===i.Eb(e,65)._animationMode])})}function O(n){return i.Lb(0,[(n()(),i.sb(0,0,null,null,1,"app-sorting-algorithms",[],null,null,null,P,C)),i.rb(1,4308992,null,0,k,[S.a],null,null)],function(n,e){n(e,1,0)},null)}var A=i.ob("app-sorting-algorithms",k,O,{},{},[]),T=t("cUpR"),B=t("Xd0L");class L{}var j=t("PCNd");t.d(e,"SortingAlgorithmsModuleNgFactory",function(){return V});var V=i.pb(l,[],function(n){return i.Bb([i.Cb(512,i.j,i.ab,[[8,[r.a,A]],[3,i.j],i.w]),i.Cb(4608,s.m,s.l,[i.t,[2,s.E]]),i.Cb(4608,a.m,a.m,[]),i.Cb(4608,T.e,B.a,[[2,B.c],[2,B.e]]),i.Cb(1073742336,s.b,s.b,[]),i.Cb(1073742336,a.l,a.l,[]),i.Cb(1073742336,a.c,a.c,[]),i.Cb(1073742336,o.m,o.m,[[2,o.r],[2,o.k]]),i.Cb(1073742336,L,L,[]),i.Cb(1073742336,j.a,j.a,[]),i.Cb(1073742336,c.a,c.a,[]),i.Cb(1073742336,B.e,B.e,[[2,B.b],[2,T.f]]),i.Cb(1073742336,d.b,d.b,[]),i.Cb(1073742336,l,l,[]),i.Cb(1024,o.i,function(){return[[{path:"",component:k}]]},[])])})}}]);